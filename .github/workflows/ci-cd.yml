name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      kafka:
        image: confluentinc/cp-kafka:7.5.0
        depends_on:
          - zookeeper
        ports:
          - 9092:9092
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_NUM_PARTITIONS: 1
        options: >-
          --health-cmd "kafka-topics --bootstrap-server kafka:9092 --list"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      zookeeper:
        image: confluentinc/cp-zookeeper:7.5.0
        ports:
          - 2181:2181
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
        options: >-
          --health-cmd "echo ruok | nc -w 2 localhost 2181 | grep imok"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js for Prettier
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Cache OWASP Dependency-Check Data
        uses: actions/cache@v4
        with:
          path: ~/.owasp-dependency-check
          key: ${{ runner.os }}-owasp-${{ hashFiles('pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-owasp-

      - name: Check code formatting with Spotless
        run: mvn spotless:check

      - name: Apply code formatting with Spotless
        if: failure()
        run: |
          mvn spotless:apply 
          git config --global user.email "kirakosyandavit1995@gmail.com"
          git config --global user.name "kirakosyan-david"
          git add .
          git commit -m "Apply Spotless formatting" || echo "No changes to commit"
          git push origin HEAD:${{ github.event.pull_request.head.ref || github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and test with Maven
        run: mvn clean verify -Pci
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/testdb
          SPRING_DATASOURCE_USERNAME: test
          SPRING_DATASOURCE_PASSWORD: test
          SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
          SPRING_REDIS_HOST: redis
          SPRING_REDIS_PORT: 6379

      - name: Check NVD connectivity
        run: curl -I https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-recent.meta
        if: always()

      - name: OWASP dependency check
        run: mvn org.owasp:dependency-check-maven:check -X
        if: always()

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: target/surefire-reports/

      - name: Build JAR (skip tests)
        if: github.event_name == 'push'
        run: mvn package -DskipTests

      - name: Upload JAR
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: target/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push'

    steps:
      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: target/

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: pioneer-pixel-app
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: target/*.jar